<<<<<<< HEAD
import inspect
import logging
import sys

from . import monkey

import distutils.log
=======
import sys
import logging
import distutils.log
from . import monkey
>>>>>>> e57018e (Initial commit of Flask web version)


def _not_warning(record):
    return record.levelno < logging.WARNING


<<<<<<< HEAD
def configure() -> None:
=======
def configure():
>>>>>>> e57018e (Initial commit of Flask web version)
    """
    Configure logging to emit warning and above to stderr
    and everything else to stdout. This behavior is provided
    for compatibility with distutils.log but may change in
    the future.
    """
    err_handler = logging.StreamHandler()
    err_handler.setLevel(logging.WARNING)
    out_handler = logging.StreamHandler(sys.stdout)
    out_handler.addFilter(_not_warning)
    handlers = err_handler, out_handler
    logging.basicConfig(
<<<<<<< HEAD
        format="{message}", style='{', handlers=handlers, level=logging.DEBUG
    )
    if inspect.ismodule(distutils.dist.log):
=======
        format="{message}", style='{', handlers=handlers, level=logging.DEBUG)
    if hasattr(distutils.log, 'Log'):
>>>>>>> e57018e (Initial commit of Flask web version)
        monkey.patch_func(set_threshold, distutils.log, 'set_threshold')
        # For some reason `distutils.log` module is getting cached in `distutils.dist`
        # and then loaded again when patched,
        # implying: id(distutils.log) != id(distutils.dist.log).
        # Make sure the same module object is used everywhere:
        distutils.dist.log = distutils.log


<<<<<<< HEAD
def set_threshold(level: int) -> int:
    logging.root.setLevel(level * 10)
=======
def set_threshold(level):
    logging.root.setLevel(level*10)
>>>>>>> e57018e (Initial commit of Flask web version)
    return set_threshold.unpatched(level)
